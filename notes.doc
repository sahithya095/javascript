TRAINING

6/1/2025
variables:variables are used to store data(any type of data)
1) static typed and dynamic typed

case sensitive:
1) start with letters , underscore,$
2) can't start with numbers
3) reserved words can't be used

how to declare variables:
1.variable(var)
2.let
3.constant(const)

reassigning var, let, const is accepted
var a=1
a=8

redeclaring var is accepted
var a=0
var a=9

redeclaring const, let is not accepted

two types of data types
1. Primitive data type
2. Non-Primitive data type

to check the data type -typeof

1. Primitive data type: we an store single values
1, Numbers: Integers, floats
2, String: Stream of characters enclosed in quotes single'', double"", backtick quotes
3, Boolean: true or false
4, Null: empty value or no value
5, Undefined: declared variable with no value

condition: An expression that evaluates the result(true or false)
console.log(5>4): true

condition statement: 
To make the set if instructions execute only when the condition is true
Block of code(condition Block): set of instructions
--when this block of code will execute it will execute when the given specific condition is true

identation: {
    Block of code
}

if: only one condition is possible

^^Date: 8/1/2025^^

javascript operators

1, Arithmetic operators:  +, -, *, 
division - /(quoitent)
modulus  - %(remainder)
exponential  - **
 2,logical operators: &&, ||
 3, relational(comparsion) operators: >, <, >=, <=, 
 ==(compares value), !=, 
 ===(compares datatype,strict equality), 
 !==(compare datatype, strict inequality)

 4, condition operators: ternary operator- ? : 

 window methods:
 prompt: is used to take input from user and the default data type is string.

 Date:20/01/25
Loops: Block of code several tyms
1.	For loop
2.	For in 
3.	For of
4.	While
5.	Do while
For loop: 
Syntax: for(initialization; condition ; update—expression){
//block of code
}


Date: 21/01/25
For in loop
Const a = ‘ramya’
For(let I in a){
//block of code
}
While loop
We use while loop when we doesn’t know the no of iterations in advance
Syntax of while loop
While(condition){
//block of code
}
1.	Cond inside the ()
2.	{}
3.	False 
Do while syntax:
Do{
//block of code
}while(condition)
Break statement: if it matches with the condition it will stop executing.
Continue statement: if it matches with the condition it will skip that step and execute the remaining program

Nested loops: A loop inside the another loop
The inner loop will execute one time for each iteration of outer loop
An inner loop within the repeating block of outer loop


Date: 23/01/2025
1, conditioal statements
2, loops
3,nested loops
break and continue
funtions
DOM
events
mini projects
major projects
html,javascript,css, react
java, spring boot,mysql
web applications
front-end
database,java
 
funtions: A funtion is a resuable block of code. It can be called anywhere in the program.
--resuable code: using an existing code without writing it ever we need
you can use the same code with different arguments to get the results
JS:
keyword=function
()
parameters=values (variables)which are declared inside the () paranthesis while defining a function

arguments: values which are passed through the parameters
function return: the return statement can be used to return the value to function call

Anonymous function: A function with out name, after we create a function without name and we assign it to a variable
ex: sum=function(a,b){
    let r= a+b;
    return r;
}
console.log(sum)

Date:24/1/2025
Arrow function:
--Es6 version
--more readable and more structure
--Anonymous functions(lambda function)
--without function name but they are assigned to a variable

example:
let c=()=>{
    console.log("smily")
}
c();

Arrow function with parameter
ex: let a=(x,y)=>{
    return x+y;
}
a(7,7);

Arrow function with one parameter:
ex:
let greet =x=>console.log(x);
    greet('hello');
Arrow function with ternary operation:
example:
  let age=45;
    let welcome=(age<18)?()=>console.log("hi "+age):()=>console.log("hi "+age);
    welcome();
 javascript can execute both synchronus and asynchronus
 --one task after other
 ex:
 function task1(){
    console.log('task1: start')
 }

 javascript callback functions:
 a callback function is a function that is passed argument to another function
 example:
 function greet(name,callback){
    console.log(`hello,${name} !`);
    callback();
    //this calls the callback function after greeting
 }
 function saygoodbye(){
    console.log("goodbye")
 }
 //call greet and pass say goodbye as the callback
 greet(sam)
 promise:
 -eventual completion
 1. pending: still not completed , continuing
 2.fulfilled: task completed
 3. rejected: the operation is failed

 example:
 Date: 25/01/2025
 callback function:
  A callback function is a function that is passed argument to another function
 Execution: the function receiving the callback will execute the callback function at some point during execution
example1:passing a callback function
 example2: passing a named function as callback
 example3:anonymous function as callback
 example4:asynchronous callback function with timeout
 example5: using callbck function with array methods
 
 EX: map is a built in array method that callback function to process item in a array
the callback function will double (num*2) each item in the array and return the array \

Date: 27/01/2025
promise:It is special javascript object that represents the eventual completion(or failure) of an asynchronous operation
it allows to handle asynchronous tasks more efficiently than callbacks

THREE STATES:
1.Pending:The intial state, the promise is still watching for the operation to finish
2.fulfilled:THe operation completed sucessfully
3.rejected:the operation failed

exp:to create a promise -new promise()
Two parameters:
resolve--to mark the promise sucessfully
reject: to mark it as failed

2,handling the result:
then(): method is called when the promise is fulfilled.
It receives the result from the resolve()
catch(): method is called if promise is rejected it receives the error message from reject().
eg:    let mypromise= new Promise((resolve,reject)=>{
    let success=false;
    if(success){
        resolve("The operation is successful");
    }else{
        reject("The operation is failed");
    }
});
mypromise.then(result=>{
    console.log(result);
}).catch(error=>{
    console.log(error);
});

^^chaining promises:^^
Example:
let promise=new Promise((resolve,reject)=>{
    resolve(5);
    //intial value is 5
})
promise.then(result=>{
    console.log(result);
    return result*2
    })
    .then(result=>{
    console.log(result);
    return result+3
    })
    .then(result=>{
    console.log(result);
}).catch(error=>{
    console.log(error);
});

eg: promise with the settimeout
--asynchronous task using set timeout , and the promise will resolve after a certain amount of time.

Date:28/01/2025

DOM (document object model)
it is used in web development used to interact and manipulate(change) the html documents
when the webpage loaded, the browser create DOM of the webpage
when the html file is loaded into the browser
the javascript cannot understand the html document directly

DOM:It is basically the representation of the same  html document but in a tree-like structure composed of object
KEYPOINTS:
1.structure: The DOM represents the structure of html document as a tree. Ecah node in tree represents the elements an attributeor text
2.manipulation: using javascript ,you can interact with elements (buttons,paragraphs) on the webpage, changing the content, styles,can add or remove elements
3.Event handling: you can handle the interactions,like click or pressing the buttons
4.W3C:world wide web construction:accounting to W3C we need to build the webpage.

Methods of document object:
Used to interact with and manipulate the document
Getting Element:
1.getting an element by id
2.getting an element by class
3.getting an element by tag
4.getting an element by query selector
#id and class: